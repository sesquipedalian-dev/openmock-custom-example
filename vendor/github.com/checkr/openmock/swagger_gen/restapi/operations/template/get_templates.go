// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTemplatesHandlerFunc turns a function with the right signature into a get templates handler
type GetTemplatesHandlerFunc func(GetTemplatesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTemplatesHandlerFunc) Handle(params GetTemplatesParams) middleware.Responder {
	return fn(params)
}

// GetTemplatesHandler interface for that can handle valid get templates params
type GetTemplatesHandler interface {
	Handle(GetTemplatesParams) middleware.Responder
}

// NewGetTemplates creates a new http.Handler for the get templates operation
func NewGetTemplates(ctx *middleware.Context, handler GetTemplatesHandler) *GetTemplates {
	return &GetTemplates{Context: ctx, Handler: handler}
}

/*GetTemplates swagger:route GET /templates template getTemplates

Get all templates in the loaded model

*/
type GetTemplates struct {
	Context *middleware.Context
	Handler GetTemplatesHandler
}

func (o *GetTemplates) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTemplatesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
